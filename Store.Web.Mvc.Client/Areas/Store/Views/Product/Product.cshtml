@using System.Activities.Expressions
@using Store.Infrastructure
@model Store.DomainModel.DTOs.ProductDetailsDto

@{
    ViewBag.Title = "Product";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="content_position">
    <div class="container-fluid">
        <div class="row row-backlink">
            <a href="javascript:window.history.back();"><i class="glyphicon glyphicon-menu-left"></i>Back to previous page</a>
        </div>

            <div class="row">
                <div class="col-xs-6  product_activeImg">
                    <div class="thumbnail">
                        <img class="img_product" src="@Model.ProductImageLargeUrl" alt="@Model.ProductName">
                    </div>
                </div>
                <!-- Root element of PhotoSwipe. Must have class pswp. -->
                <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

                    <!-- Background of PhotoSwipe.
                    It's a separate element, as animating opacity is faster than rgba(). -->
                    <div class="pswp__bg"></div>

                    <!-- Slides wrapper with overflow:hidden. -->
                    <div class="pswp__scroll-wrap">

                        <!-- Container that holds slides. PhotoSwipe keeps only 3 slides in DOM to save memory. -->
                        <div class="pswp__container">
                            <!-- don't modify these 3 pswp__item elements, data is added later on -->
                            <div class="pswp__item"></div>
                            <div class="pswp__item"></div>
                            <div class="pswp__item"></div>
                        </div>

                        <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
                        <div class="pswp__ui pswp__ui--hidden">

                            <div class="pswp__top-bar">

                                <!--  Controls are self-explanatory. Order can be changed. -->

                                <div class="pswp__counter"></div>

                                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

                                <!-- Preloader demo https://codepen.io/dimsemenov/pen/yyBWoR -->
                                <!-- element will get class pswp__preloader--active when preloader is running -->
                                <div class="pswp__preloader">
                                    <div class="pswp__preloader__icn">
                                        <div class="pswp__preloader__cut">
                                            <div class="pswp__preloader__donut"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                                <div class="pswp__share-tooltip"></div>
                            </div>

                            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>

                            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

                            <div class="pswp__caption">
                                <div class="pswp__caption__center"></div>
                            </div>

                        </div>

                    </div>

                </div>
                <div class="col-xs-6 description_product">
                    <h2>@Model.ProductName</h2>
                    <p>@Model.ProductDescription</p>

                    <form>
                        <input type="hidden" name="id" id="id" value="@Model.ProductId" />
                        <table>
                            <tr>
                                <td>Price:</td>
                                <td><span class="price_product">@Math.Round(Model.ProductPrice, 2)$</span></td>
                            </tr>
                            <tr>
                                <td>Now available:&nbsp;</td>
                                <td> @Math.Round(Model.ProductQuanity) pieces</td>
                            </tr>
                            <tr>
                                <td colspan="2">
                                    <input class="slider" type="text"
                                           name="countToCart"
                                           data-slider-min="1"
                                           data-slider-max="@Math.Round(Model.ProductQuanity)"
                                           data-slider-step="1"
                                           data-slider-value="1"
                                           data-slider-tooltip="show"/>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <button id="submit" class="btn btn-warning" style="margin-top: 0;">Add to Cart</button>
                                </td>
                                <td>
                                    <select name="count" id="count" style="width: 60px;">
                                        @for (int i = 1; i <= Model.ProductQuanity; i++)
                                        {
                                            <option>@i</option>
                                        }
                                    </select>
                                </td>
                            </tr>
                            <tr>
                                <td colspan="2">
                                    <div id="cart-alert" class="alert alert-success alert-add-cart"></div>
                                </td>
                            </tr>
                        </table>
                    </form>
                </div>
            </div>
        </div>
    </div>

@section Scripts
{
    <script type="text/javascript">

        $(function() {
            var slider = {};

            var countProductsList = $("#count")
                .change(function(e) {
                    slider.bootstrapSlider('setValue', countProductsList.val());
                });

            // Instantiate a slider
            slider = $("input.slider")
                .bootstrapSlider()
                .change(function(e) {
                    countProductsList.val(slider.bootstrapSlider('getValue'));
                });

            //Photoswipe
            var openPhotoSwipe = function() {
                var pswpElement = document.querySelectorAll('.pswp')[0];

                var productImages = $("img.img_product");

                // build items array
                var items = [];

                //get image dimensions
                productImages.each(function() {
                    items.push({ src: $(this).attr('src'), w: this.naturalWidth, h: this.naturalHeight });
                });

                // define options (if needed)
                var options = {
                    // history & focus options are disabled on CodePen
                    history: false,
                    focus: false,

                    showAnimationDuration: 0,
                    hideAnimationDuration: 0

                };

                var gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);
                gallery.init();
            };

            document.getElementsByClassName('img_product')[0].onclick = openPhotoSwipe;
        });

        // see "Pro JavaScript and jQuery Patterns" package for details

        // ** namespace pattern
        // ** revealing module pattern
        // ** singleton pattern
        Patterns.namespace("Store").Product = (function() {

            var utils = Patterns.Store.Utils;
            var app = Patterns.Store.App;

            var addToCart = function(event) {

                // display success message
                var count = parseInt($("#count").val(), 10);

                var items = count > 1 ? " items" : " item";
                $("#cart-alert").html("Added " + count + items + "</br>to your cart.")
                    .fadeIn(500).delay(2500).fadeOut(2000);

                // refreshes cart display at top
                app.updateCartOnPage(count);

                var $form = $(this);

                var options = {
                    url: "/cart",
                    type: "POST",
                    data: $form.serialize(),
                    error: function(jqXhr, exception) {
                        var msg = '';
                        if (jqXhr.status === 0) {
                            msg = 'Not connect.\n Verify Network.';
                        } else if (jqXhr.status === 404) {
                            msg = 'Requested page not found. [404]';
                        } else if (jqXhr.status === 500) {
                            msg = 'Internal Server Error [500].';
                        } else if (exception === 'parsererror') {
                            msg = 'Requested JSON parse failed.';
                        } else if (exception === 'timeout') {
                            msg = 'Time out error.';
                        } else if (exception === 'abort') {
                            msg = 'Ajax request aborted.';
                        } else {
                            msg = 'Uncaught Error.\n' + jqXhr.responseText;
                        }
                        alert(msg);
                    },
                    succes: function() {
                        alert("Succeeded!");
                    }
                };

                //** fire and forget -- CQRS pattern
                $.ajax(options);

                return utils.stopEvent(event);
            }

            var activateControls = function() {
                $("form").submit(addToCart);
            };

            var start = function() {
                activateControls();
            };

            // the revealing part of revealing module pattern
            return { start: start };
        })();


        $(function() {

            // ** facade pattern
            product = Patterns.Store.Product;
            product.start();
        });

    </script>
}

